#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KuroBuildingGridSystem

#include "Basic.hpp"

#include "KuroBuildingGridSystem_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function KuroBuildingGridSystem.KuroBuildingGrid.OccupyTarget
// 0x0018 (0x0018 - 0x0000)
struct KuroBuildingGrid_OccupyTarget final
{
public:
	struct FKuroBuildingGridCellVector            InCoords;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                InTarget;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KuroBuildingGrid_OccupyTarget) == 0x000008, "Wrong alignment on KuroBuildingGrid_OccupyTarget");
static_assert(sizeof(KuroBuildingGrid_OccupyTarget) == 0x000018, "Wrong size on KuroBuildingGrid_OccupyTarget");
static_assert(offsetof(KuroBuildingGrid_OccupyTarget, InCoords) == 0x000000, "Member 'KuroBuildingGrid_OccupyTarget::InCoords' has a wrong offset!");
static_assert(offsetof(KuroBuildingGrid_OccupyTarget, InTarget) == 0x000008, "Member 'KuroBuildingGrid_OccupyTarget::InTarget' has a wrong offset!");
static_assert(offsetof(KuroBuildingGrid_OccupyTarget, ReturnValue) == 0x000010, "Member 'KuroBuildingGrid_OccupyTarget::ReturnValue' has a wrong offset!");

// Function KuroBuildingGridSystem.KuroBuildingGrid.UnoccupyTarget
// 0x0010 (0x0010 - 0x0000)
struct KuroBuildingGrid_UnoccupyTarget final
{
public:
	class UObject*                                InTarget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KuroBuildingGrid_UnoccupyTarget) == 0x000008, "Wrong alignment on KuroBuildingGrid_UnoccupyTarget");
static_assert(sizeof(KuroBuildingGrid_UnoccupyTarget) == 0x000010, "Wrong size on KuroBuildingGrid_UnoccupyTarget");
static_assert(offsetof(KuroBuildingGrid_UnoccupyTarget, InTarget) == 0x000000, "Member 'KuroBuildingGrid_UnoccupyTarget::InTarget' has a wrong offset!");
static_assert(offsetof(KuroBuildingGrid_UnoccupyTarget, ReturnValue) == 0x000008, "Member 'KuroBuildingGrid_UnoccupyTarget::ReturnValue' has a wrong offset!");

// Function KuroBuildingGridSystem.KuroBuildingGrid.GetBuildingGridGuidString
// 0x0010 (0x0010 - 0x0000)
struct KuroBuildingGrid_GetBuildingGridGuidString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroBuildingGrid_GetBuildingGridGuidString) == 0x000008, "Wrong alignment on KuroBuildingGrid_GetBuildingGridGuidString");
static_assert(sizeof(KuroBuildingGrid_GetBuildingGridGuidString) == 0x000010, "Wrong size on KuroBuildingGrid_GetBuildingGridGuidString");
static_assert(offsetof(KuroBuildingGrid_GetBuildingGridGuidString, ReturnValue) == 0x000000, "Member 'KuroBuildingGrid_GetBuildingGridGuidString::ReturnValue' has a wrong offset!");

// Function KuroBuildingGridSystem.KuroBuildingGridPlaceholderInterface.GetSizeByDegree
// 0x000C (0x000C - 0x0000)
struct KuroBuildingGridPlaceholderInterface_GetSizeByDegree final
{
public:
	float                                         Degree;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKuroBuildingGridCellVector            ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroBuildingGridPlaceholderInterface_GetSizeByDegree) == 0x000004, "Wrong alignment on KuroBuildingGridPlaceholderInterface_GetSizeByDegree");
static_assert(sizeof(KuroBuildingGridPlaceholderInterface_GetSizeByDegree) == 0x00000C, "Wrong size on KuroBuildingGridPlaceholderInterface_GetSizeByDegree");
static_assert(offsetof(KuroBuildingGridPlaceholderInterface_GetSizeByDegree, Degree) == 0x000000, "Member 'KuroBuildingGridPlaceholderInterface_GetSizeByDegree::Degree' has a wrong offset!");
static_assert(offsetof(KuroBuildingGridPlaceholderInterface_GetSizeByDegree, ReturnValue) == 0x000004, "Member 'KuroBuildingGridPlaceholderInterface_GetSizeByDegree::ReturnValue' has a wrong offset!");

// Function KuroBuildingGridSystem.KuroBuildingGridPlaceholderInterface.CanBeRemoved
// 0x0001 (0x0001 - 0x0000)
struct KuroBuildingGridPlaceholderInterface_CanBeRemoved final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroBuildingGridPlaceholderInterface_CanBeRemoved) == 0x000001, "Wrong alignment on KuroBuildingGridPlaceholderInterface_CanBeRemoved");
static_assert(sizeof(KuroBuildingGridPlaceholderInterface_CanBeRemoved) == 0x000001, "Wrong size on KuroBuildingGridPlaceholderInterface_CanBeRemoved");
static_assert(offsetof(KuroBuildingGridPlaceholderInterface_CanBeRemoved, ReturnValue) == 0x000000, "Member 'KuroBuildingGridPlaceholderInterface_CanBeRemoved::ReturnValue' has a wrong offset!");

// Function KuroBuildingGridSystem.KuroBuildingGridPlaceholderInterface.GetSize
// 0x0008 (0x0008 - 0x0000)
struct KuroBuildingGridPlaceholderInterface_GetSize final
{
public:
	struct FKuroBuildingGridCellVector            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroBuildingGridPlaceholderInterface_GetSize) == 0x000004, "Wrong alignment on KuroBuildingGridPlaceholderInterface_GetSize");
static_assert(sizeof(KuroBuildingGridPlaceholderInterface_GetSize) == 0x000008, "Wrong size on KuroBuildingGridPlaceholderInterface_GetSize");
static_assert(offsetof(KuroBuildingGridPlaceholderInterface_GetSize, ReturnValue) == 0x000000, "Member 'KuroBuildingGridPlaceholderInterface_GetSize::ReturnValue' has a wrong offset!");

// Function KuroBuildingGridSystem.KuroBuildingGridSubsystem.K2_ProjectPointToGrid
// 0x00A0 (0x00A0 - 0x0000)
struct KuroBuildingGridSubsystem_K2_ProjectPointToGrid final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVectorDouble                          InPoint;                                           // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InNormal;                                          // 0x0020(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKuroBuildingGridRaycastResult         OutResult;                                         // 0x0030(0x0060)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0090(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0xF];                                       // 0x0091(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KuroBuildingGridSubsystem_K2_ProjectPointToGrid) == 0x000010, "Wrong alignment on KuroBuildingGridSubsystem_K2_ProjectPointToGrid");
static_assert(sizeof(KuroBuildingGridSubsystem_K2_ProjectPointToGrid) == 0x0000A0, "Wrong size on KuroBuildingGridSubsystem_K2_ProjectPointToGrid");
static_assert(offsetof(KuroBuildingGridSubsystem_K2_ProjectPointToGrid, WorldContextObject) == 0x000000, "Member 'KuroBuildingGridSubsystem_K2_ProjectPointToGrid::WorldContextObject' has a wrong offset!");
static_assert(offsetof(KuroBuildingGridSubsystem_K2_ProjectPointToGrid, InPoint) == 0x000008, "Member 'KuroBuildingGridSubsystem_K2_ProjectPointToGrid::InPoint' has a wrong offset!");
static_assert(offsetof(KuroBuildingGridSubsystem_K2_ProjectPointToGrid, InNormal) == 0x000020, "Member 'KuroBuildingGridSubsystem_K2_ProjectPointToGrid::InNormal' has a wrong offset!");
static_assert(offsetof(KuroBuildingGridSubsystem_K2_ProjectPointToGrid, OutResult) == 0x000030, "Member 'KuroBuildingGridSubsystem_K2_ProjectPointToGrid::OutResult' has a wrong offset!");
static_assert(offsetof(KuroBuildingGridSubsystem_K2_ProjectPointToGrid, ReturnValue) == 0x000090, "Member 'KuroBuildingGridSubsystem_K2_ProjectPointToGrid::ReturnValue' has a wrong offset!");

// Function KuroBuildingGridSystem.KuroBuildingGridSubsystem.K2_RaycastGrid
// 0x0090 (0x0090 - 0x0000)
struct KuroBuildingGridSubsystem_K2_RaycastGrid final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Start;                                             // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x0014(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKuroBuildingGridRaycastResult         OutResult;                                         // 0x0020(0x0060)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0080(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0xF];                                       // 0x0081(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KuroBuildingGridSubsystem_K2_RaycastGrid) == 0x000010, "Wrong alignment on KuroBuildingGridSubsystem_K2_RaycastGrid");
static_assert(sizeof(KuroBuildingGridSubsystem_K2_RaycastGrid) == 0x000090, "Wrong size on KuroBuildingGridSubsystem_K2_RaycastGrid");
static_assert(offsetof(KuroBuildingGridSubsystem_K2_RaycastGrid, WorldContextObject) == 0x000000, "Member 'KuroBuildingGridSubsystem_K2_RaycastGrid::WorldContextObject' has a wrong offset!");
static_assert(offsetof(KuroBuildingGridSubsystem_K2_RaycastGrid, Start) == 0x000008, "Member 'KuroBuildingGridSubsystem_K2_RaycastGrid::Start' has a wrong offset!");
static_assert(offsetof(KuroBuildingGridSubsystem_K2_RaycastGrid, End) == 0x000014, "Member 'KuroBuildingGridSubsystem_K2_RaycastGrid::End' has a wrong offset!");
static_assert(offsetof(KuroBuildingGridSubsystem_K2_RaycastGrid, OutResult) == 0x000020, "Member 'KuroBuildingGridSubsystem_K2_RaycastGrid::OutResult' has a wrong offset!");
static_assert(offsetof(KuroBuildingGridSubsystem_K2_RaycastGrid, ReturnValue) == 0x000080, "Member 'KuroBuildingGridSubsystem_K2_RaycastGrid::ReturnValue' has a wrong offset!");

}

