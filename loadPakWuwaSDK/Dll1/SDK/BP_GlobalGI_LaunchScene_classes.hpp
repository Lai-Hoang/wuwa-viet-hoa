#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GlobalGI_LaunchScene

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "KuroRenderingRuntimeBPPlugin_structs.hpp"
#include "KuroRenderingRuntimeBPPlugin_classes.hpp"
#include "KuroCurve_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_GlobalGI_LaunchScene.BP_GlobalGI_LaunchScene_C
// 0x03C0 (0x32B0 - 0x2EF0)
class ABP_GlobalGI_LaunchScene_C final : public AKuroGlobalGI
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x2EF0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneRayTracingGICaptureComponentCube* SceneRayTracingGICaptureComponentCube;             // 0x2EF8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   KuroVolumeCloudGlobal1;                            // 0x2F00(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UKuroPostProcessComponent*              LUTPostProcess;                                    // 0x2F08(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Skybox;                                            // 0x2F10(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UKuroPostProcessComponent*              GlobalUiKuroPostProcess;                           // 0x2F18(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  GlobalPostProcessVolume;                           // 0x2F20(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDirectionalLightComponent*             SceneLight;                                        // 0x2F28(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDirectionalLightComponent*             AtmoMoonLight;                                     // 0x2F30(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDirectionalLightComponent*             AtmoSunLight;                                      // 0x2F38(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkyLightComponent*                     SkyLight;                                          // 0x2F40(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UExponentialHeightFogComponent*         HeightFog;                                         // 0x2F48(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x2F50(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         CharacterLightHorizontal;                          // 0x2F58(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrTimeOfDay;                                     // 0x2F5C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaTime;                                         // 0x2F60(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableTODCycle;                                    // 0x2F64(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          PauseTOD;                                          // 0x2F65(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	bool                                          编辑器下更新;                                      // 0x2F66(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F67[0x1];                                     // 0x2F67(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TODCycleTime;                                      // 0x2F68(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               AtmosphereSunRot;                                  // 0x2F6C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               SenenDirLightRot;                                  // 0x2F78(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         BP_SunHorizonAngle;                                // 0x2F84(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BP_SunVerticalAngle;                               // 0x2F88(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MainLightHorizonAngle;                             // 0x2F8C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MainLightVerticalAngle;                            // 0x2F90(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MainLightAngleLimit;                               // 0x2F94(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsGIEnable;                                        // 0x2F98(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          使用随机的昼夜循环天气组;                          // 0x2F99(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F9A[0x2];                                     // 0x2F9A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         当前的天气组索引值;                                // 0x2F9C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           太阳颜色;                                          // 0x2FA0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector2D>                      SunLightExistTime;                                 // 0x2FB0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FVector2D>                      MoonLightExistTime;                                // 0x2FC0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          运行时自动开始循环;                                // 0x2FD0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          UISceneRendering;                                  // 0x2FD1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2FD2[0x6];                                     // 0x2FD2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UPDA_GIUIData_C*                        UIData;                                            // 0x2FD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DEBUG_UI;                                          // 0x2FE0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsRootGI;                                          // 0x2FE1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsEditorUpdate;                                    // 0x2FE2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          更新角色光方向;                                    // 0x2FE3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          根据光源方向自动更新角色光方向;                    // 0x2FE4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          DEBUG_使用角色预览方向光;                          // 0x2FE5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2FE6[0x2];                                     // 0x2FE6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DEBUG_角色预览方向光方向;                          // 0x2FE8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TotalDaysElapsed;                                  // 0x2FEC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MoonFade;                                          // 0x2FF0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              MoonVisibleTime;                                   // 0x2FF4(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          关闭雾效;                                          // 0x2FFC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          RuntimeTimeEnable;                                 // 0x2FFD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	uint8                                         Pad_2FFE[0x2];                                     // 0x2FFE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MainLightTickSecond;                               // 0x3000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         MainLightTickCounter;                              // 0x3004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ForceUpdateMainLightDir;                           // 0x3008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3009[0x3];                                     // 0x3009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WindDir;                                           // 0x300C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          使用临时雾效;                                      // 0x3010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          开启集群特效;                                      // 0x3011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3012[0x6];                                     // 0x3012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstance*                      TempFogMaterial;                                   // 0x3018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               TempFogDMI;                                        // 0x3020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               SkyboxDMI;                                         // 0x3028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      SkyboxMaterial;                                    // 0x3030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           SunDiscColor;                                      // 0x3038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           SunScatterColor;                                   // 0x3048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SunSize;                                           // 0x3058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           MoonDiscColor;                                     // 0x305C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           MoonScatterColor;                                  // 0x306C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MoonSize;                                          // 0x307C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           HorizonColor;                                      // 0x3080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HorizonFalloff;                                    // 0x3090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ZenithColor;                                       // 0x3094(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ExtremWeatherWeight;                               // 0x30A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ST_TopColor;                                       // 0x30A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ST_DomeColorTint;                                  // 0x30B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ST_TopWidth;                                       // 0x30C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_30CC[0x4];                                     // 0x30CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            CharMainLightCurve;                                // 0x30D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            CharSkyLightCurve;                                 // 0x30D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseCharCustomLighting;                             // 0x30E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_30E1[0x3];                                     // 0x30E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CharAmbientColor;                                  // 0x30E4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CharSkinAmbientColor;                              // 0x30F4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3104[0x4];                                     // 0x3104(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            CharShadowCurve;                                   // 0x3108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      LightFunctionMaterial;                             // 0x3110(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LightFunctionIntensity;                            // 0x3118(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_311C[0x4];                                     // 0x311C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               LightFunctionDMI;                                  // 0x3120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DEBUG开启无音区特殊地表;                           // 0x3128(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	uint8                                         Pad_3129[0x7];                                     // 0x3129(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstance*                      LensFlareMI;                                       // 0x3130(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               LensFlareDMI;                                      // 0x3138(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Nadir_Color;                                       // 0x3140(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Nadir_Falloff;                                     // 0x3150(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Sun_Scatter_Size;                                  // 0x3154(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Moon_Scatter_Size;                                 // 0x3158(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MainDirectionLightUpdateThreshold_Mobile;          // 0x315C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MainDirectionLightUpdateThreshold;                 // 0x3160(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                GlobalWindDirection;                               // 0x3164(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                GlobalWindRightDirection;                          // 0x3170(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DEBUG无音区特殊地表强度;                           // 0x317C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Character_Rim_Color;                               // 0x3180(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RealTimeOfDay;                                     // 0x3190(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               SunRotation;                                       // 0x3194(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         DEBUG_角色预览方向光垂直方向;                      // 0x31A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UIWorldZOffset;                                    // 0x31A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UINeedLerpData;                                    // 0x31A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          CanSpawnEffect;                                    // 0x31A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          编辑器下关闭LensFlare;                             // 0x31AA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31AB[0x5];                                     // 0x31AB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UKuroGlobalColorMapComponent*           KuroGlobalColorMap;                                // 0x31B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UKuroGlobalHeightMapComponent*          KuroGlobalHeightMap;                               // 0x31B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsComponentsEnable;                                // 0x31C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31C1[0x3];                                     // 0x31C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DefaultSkyLightShadowSupplement;                   // 0x31C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DefaultSkyLightReflectionAddIntensity;             // 0x31C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31CC[0x4];                                     // 0x31CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UChildActorComponent*                   RainOverrider;                                     // 0x31D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Clouds_C*                           DynamicCloudsActor;                                // 0x31D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Clouds_Change_Time;                                // 0x31E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EKuroDynamicCloudType                         LocalDynamicCloudsType;                            // 0x31E4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31E5[0x3];                                     // 0x31E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Clouds_Change_CD;                                  // 0x31E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_Editor_Update;                                  // 0x31EC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          启用时间参数写入;                                  // 0x31ED(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31EE[0x2];                                     // 0x31EE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               InitLightFunctionMap;                              // 0x31F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      StarsMaterial;                                     // 0x31F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Stars;                                          // 0x3200(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      MilkyWayMaterial;                                  // 0x3208(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_MilkyWay;                                       // 0x3210(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   CloudOcean;                                        // 0x3218(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKuroCurveFloat                        FogTImeControl;                                    // 0x3220(0x0090)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void ExecuteUbergraph_BP_GlobalGI_LaunchScene(int32 EntryPoint);
	void OnKuroEndUiScene();
	void OnKuroStartUiScene(const class FString& InName, class ULevel* InUILevel);
	void OnKuroSetRuntimeTime(float CurrentTime);
	void ReceiveBeginPlay();
	void OnKuroTick(float DeltaTime_0);
	void OnKuroTickEditor(float DeltaTime_0);
	void UserConstructionScript();
	void UpdateGIData(bool SkipLerpData);
	void Update_Fog();
	void Update_Env();
	void Is_Day(bool* Result);
	void InitMaterials();
	void Get_Light_Direction(struct FVector* SunLight, struct FVector* NightLight);
	void Get_Light_Rotator(struct FRotator* SunLight, struct FRotator* NightLight);
	void InitGICompoemnt();
	void Get_Scene_Light_Direction(struct FVector* LightDir);
	void Get_Scene_Light_Rotator(struct FRotator* SunLight, struct FRotator* NightLight);
	void CalculateLightDirection(float Vertical, float Horizontal, float Time, struct FRotator* NewParam);
	void CalulateLightDirectionWithLimit(float V, float H, float Time, struct FRotator* NewParam);
	void InitFeature();
	void GetViewLocation(struct FVector* WorldPosition, bool* Suc);
	void UpdateTime();
	void UpdateMainLight();
	void Update_Main_Light_Direction();
	void GetLightDirectionFromVH(float Vertical, float Horizontal, struct FRotator* Result);
	void SetUIComponentsVisibility(bool IsVisible);
	void Set_All_Components_States(bool IsEnable);
	void InitGI();
	void UpdateSkyDome();
	void Get_Total_TOD_Time_Elapsed(float* Time);
	void GetSkyDomeActor();
	void 清晨();
	void 中午();
	void 黄昏();
	void 黄昏到夜晚();
	void 夜晚到清晨();
	void 夜晚();
	void UpdateDayNightDataLayer();
	void 辰时();
	void 上午();
	void 下午();
	void 申时();
	void GetTrulyTime(float* CurTime);
	void UpdateMisc();
	void GetSkyboxDMI(class UMaterialInstanceDynamic** DMIRet);
	struct FVector EulerToForward(float Pitch, float Yaw);
	struct FLinearColor Clamp_Luminance(const struct FLinearColor& InColor, float Min, float Max);
	void GetTODCharacterLighting(const struct FLinearColor& mainLight, float mainLightIntensity, const struct FLinearColor& skyLight, float skyLightIntensity, struct FLinearColor* FrontSideLight, struct FLinearColor* BackSideLight);
	void UpdateCloudCard(struct FKuroCloudCardSetting& CloudCardSetting);
	void UpdateEditor();
	void On_Global_GITick();
	void Update_Big_World();
	void Update_Dynamic_Clouds();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_GlobalGI_LaunchScene_C">();
	}
	static class ABP_GlobalGI_LaunchScene_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_GlobalGI_LaunchScene_C>();
	}
};
static_assert(alignof(ABP_GlobalGI_LaunchScene_C) == 0x000010, "Wrong alignment on ABP_GlobalGI_LaunchScene_C");
static_assert(sizeof(ABP_GlobalGI_LaunchScene_C) == 0x0032B0, "Wrong size on ABP_GlobalGI_LaunchScene_C");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, UberGraphFrame) == 0x002EF0, "Member 'ABP_GlobalGI_LaunchScene_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, SceneRayTracingGICaptureComponentCube) == 0x002EF8, "Member 'ABP_GlobalGI_LaunchScene_C::SceneRayTracingGICaptureComponentCube' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, KuroVolumeCloudGlobal1) == 0x002F00, "Member 'ABP_GlobalGI_LaunchScene_C::KuroVolumeCloudGlobal1' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, LUTPostProcess) == 0x002F08, "Member 'ABP_GlobalGI_LaunchScene_C::LUTPostProcess' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, Skybox) == 0x002F10, "Member 'ABP_GlobalGI_LaunchScene_C::Skybox' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, GlobalUiKuroPostProcess) == 0x002F18, "Member 'ABP_GlobalGI_LaunchScene_C::GlobalUiKuroPostProcess' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, GlobalPostProcessVolume) == 0x002F20, "Member 'ABP_GlobalGI_LaunchScene_C::GlobalPostProcessVolume' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, SceneLight) == 0x002F28, "Member 'ABP_GlobalGI_LaunchScene_C::SceneLight' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, AtmoMoonLight) == 0x002F30, "Member 'ABP_GlobalGI_LaunchScene_C::AtmoMoonLight' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, AtmoSunLight) == 0x002F38, "Member 'ABP_GlobalGI_LaunchScene_C::AtmoSunLight' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, SkyLight) == 0x002F40, "Member 'ABP_GlobalGI_LaunchScene_C::SkyLight' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, HeightFog) == 0x002F48, "Member 'ABP_GlobalGI_LaunchScene_C::HeightFog' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, DefaultSceneRoot) == 0x002F50, "Member 'ABP_GlobalGI_LaunchScene_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, CharacterLightHorizontal) == 0x002F58, "Member 'ABP_GlobalGI_LaunchScene_C::CharacterLightHorizontal' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, CurrTimeOfDay) == 0x002F5C, "Member 'ABP_GlobalGI_LaunchScene_C::CurrTimeOfDay' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, DeltaTime) == 0x002F60, "Member 'ABP_GlobalGI_LaunchScene_C::DeltaTime' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, EnableTODCycle) == 0x002F64, "Member 'ABP_GlobalGI_LaunchScene_C::EnableTODCycle' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, PauseTOD) == 0x002F65, "Member 'ABP_GlobalGI_LaunchScene_C::PauseTOD' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, 编辑器下更新) == 0x002F66, "Member 'ABP_GlobalGI_LaunchScene_C::编辑器下更新' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, TODCycleTime) == 0x002F68, "Member 'ABP_GlobalGI_LaunchScene_C::TODCycleTime' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, AtmosphereSunRot) == 0x002F6C, "Member 'ABP_GlobalGI_LaunchScene_C::AtmosphereSunRot' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, SenenDirLightRot) == 0x002F78, "Member 'ABP_GlobalGI_LaunchScene_C::SenenDirLightRot' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, BP_SunHorizonAngle) == 0x002F84, "Member 'ABP_GlobalGI_LaunchScene_C::BP_SunHorizonAngle' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, BP_SunVerticalAngle) == 0x002F88, "Member 'ABP_GlobalGI_LaunchScene_C::BP_SunVerticalAngle' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, MainLightHorizonAngle) == 0x002F8C, "Member 'ABP_GlobalGI_LaunchScene_C::MainLightHorizonAngle' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, MainLightVerticalAngle) == 0x002F90, "Member 'ABP_GlobalGI_LaunchScene_C::MainLightVerticalAngle' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, MainLightAngleLimit) == 0x002F94, "Member 'ABP_GlobalGI_LaunchScene_C::MainLightAngleLimit' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, IsGIEnable) == 0x002F98, "Member 'ABP_GlobalGI_LaunchScene_C::IsGIEnable' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, 使用随机的昼夜循环天气组) == 0x002F99, "Member 'ABP_GlobalGI_LaunchScene_C::使用随机的昼夜循环天气组' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, 当前的天气组索引值) == 0x002F9C, "Member 'ABP_GlobalGI_LaunchScene_C::当前的天气组索引值' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, 太阳颜色) == 0x002FA0, "Member 'ABP_GlobalGI_LaunchScene_C::太阳颜色' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, SunLightExistTime) == 0x002FB0, "Member 'ABP_GlobalGI_LaunchScene_C::SunLightExistTime' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, MoonLightExistTime) == 0x002FC0, "Member 'ABP_GlobalGI_LaunchScene_C::MoonLightExistTime' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, 运行时自动开始循环) == 0x002FD0, "Member 'ABP_GlobalGI_LaunchScene_C::运行时自动开始循环' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, UISceneRendering) == 0x002FD1, "Member 'ABP_GlobalGI_LaunchScene_C::UISceneRendering' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, UIData) == 0x002FD8, "Member 'ABP_GlobalGI_LaunchScene_C::UIData' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, DEBUG_UI) == 0x002FE0, "Member 'ABP_GlobalGI_LaunchScene_C::DEBUG_UI' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, IsRootGI) == 0x002FE1, "Member 'ABP_GlobalGI_LaunchScene_C::IsRootGI' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, IsEditorUpdate) == 0x002FE2, "Member 'ABP_GlobalGI_LaunchScene_C::IsEditorUpdate' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, 更新角色光方向) == 0x002FE3, "Member 'ABP_GlobalGI_LaunchScene_C::更新角色光方向' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, 根据光源方向自动更新角色光方向) == 0x002FE4, "Member 'ABP_GlobalGI_LaunchScene_C::根据光源方向自动更新角色光方向' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, DEBUG_使用角色预览方向光) == 0x002FE5, "Member 'ABP_GlobalGI_LaunchScene_C::DEBUG_使用角色预览方向光' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, DEBUG_角色预览方向光方向) == 0x002FE8, "Member 'ABP_GlobalGI_LaunchScene_C::DEBUG_角色预览方向光方向' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, TotalDaysElapsed) == 0x002FEC, "Member 'ABP_GlobalGI_LaunchScene_C::TotalDaysElapsed' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, MoonFade) == 0x002FF0, "Member 'ABP_GlobalGI_LaunchScene_C::MoonFade' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, MoonVisibleTime) == 0x002FF4, "Member 'ABP_GlobalGI_LaunchScene_C::MoonVisibleTime' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, 关闭雾效) == 0x002FFC, "Member 'ABP_GlobalGI_LaunchScene_C::关闭雾效' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, RuntimeTimeEnable) == 0x002FFD, "Member 'ABP_GlobalGI_LaunchScene_C::RuntimeTimeEnable' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, MainLightTickSecond) == 0x003000, "Member 'ABP_GlobalGI_LaunchScene_C::MainLightTickSecond' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, MainLightTickCounter) == 0x003004, "Member 'ABP_GlobalGI_LaunchScene_C::MainLightTickCounter' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, ForceUpdateMainLightDir) == 0x003008, "Member 'ABP_GlobalGI_LaunchScene_C::ForceUpdateMainLightDir' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, WindDir) == 0x00300C, "Member 'ABP_GlobalGI_LaunchScene_C::WindDir' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, 使用临时雾效) == 0x003010, "Member 'ABP_GlobalGI_LaunchScene_C::使用临时雾效' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, 开启集群特效) == 0x003011, "Member 'ABP_GlobalGI_LaunchScene_C::开启集群特效' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, TempFogMaterial) == 0x003018, "Member 'ABP_GlobalGI_LaunchScene_C::TempFogMaterial' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, TempFogDMI) == 0x003020, "Member 'ABP_GlobalGI_LaunchScene_C::TempFogDMI' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, SkyboxDMI) == 0x003028, "Member 'ABP_GlobalGI_LaunchScene_C::SkyboxDMI' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, SkyboxMaterial) == 0x003030, "Member 'ABP_GlobalGI_LaunchScene_C::SkyboxMaterial' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, SunDiscColor) == 0x003038, "Member 'ABP_GlobalGI_LaunchScene_C::SunDiscColor' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, SunScatterColor) == 0x003048, "Member 'ABP_GlobalGI_LaunchScene_C::SunScatterColor' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, SunSize) == 0x003058, "Member 'ABP_GlobalGI_LaunchScene_C::SunSize' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, MoonDiscColor) == 0x00305C, "Member 'ABP_GlobalGI_LaunchScene_C::MoonDiscColor' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, MoonScatterColor) == 0x00306C, "Member 'ABP_GlobalGI_LaunchScene_C::MoonScatterColor' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, MoonSize) == 0x00307C, "Member 'ABP_GlobalGI_LaunchScene_C::MoonSize' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, HorizonColor) == 0x003080, "Member 'ABP_GlobalGI_LaunchScene_C::HorizonColor' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, HorizonFalloff) == 0x003090, "Member 'ABP_GlobalGI_LaunchScene_C::HorizonFalloff' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, ZenithColor) == 0x003094, "Member 'ABP_GlobalGI_LaunchScene_C::ZenithColor' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, ExtremWeatherWeight) == 0x0030A4, "Member 'ABP_GlobalGI_LaunchScene_C::ExtremWeatherWeight' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, ST_TopColor) == 0x0030A8, "Member 'ABP_GlobalGI_LaunchScene_C::ST_TopColor' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, ST_DomeColorTint) == 0x0030B8, "Member 'ABP_GlobalGI_LaunchScene_C::ST_DomeColorTint' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, ST_TopWidth) == 0x0030C8, "Member 'ABP_GlobalGI_LaunchScene_C::ST_TopWidth' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, CharMainLightCurve) == 0x0030D0, "Member 'ABP_GlobalGI_LaunchScene_C::CharMainLightCurve' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, CharSkyLightCurve) == 0x0030D8, "Member 'ABP_GlobalGI_LaunchScene_C::CharSkyLightCurve' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, UseCharCustomLighting) == 0x0030E0, "Member 'ABP_GlobalGI_LaunchScene_C::UseCharCustomLighting' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, CharAmbientColor) == 0x0030E4, "Member 'ABP_GlobalGI_LaunchScene_C::CharAmbientColor' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, CharSkinAmbientColor) == 0x0030F4, "Member 'ABP_GlobalGI_LaunchScene_C::CharSkinAmbientColor' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, CharShadowCurve) == 0x003108, "Member 'ABP_GlobalGI_LaunchScene_C::CharShadowCurve' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, LightFunctionMaterial) == 0x003110, "Member 'ABP_GlobalGI_LaunchScene_C::LightFunctionMaterial' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, LightFunctionIntensity) == 0x003118, "Member 'ABP_GlobalGI_LaunchScene_C::LightFunctionIntensity' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, LightFunctionDMI) == 0x003120, "Member 'ABP_GlobalGI_LaunchScene_C::LightFunctionDMI' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, DEBUG开启无音区特殊地表) == 0x003128, "Member 'ABP_GlobalGI_LaunchScene_C::DEBUG开启无音区特殊地表' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, LensFlareMI) == 0x003130, "Member 'ABP_GlobalGI_LaunchScene_C::LensFlareMI' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, LensFlareDMI) == 0x003138, "Member 'ABP_GlobalGI_LaunchScene_C::LensFlareDMI' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, Nadir_Color) == 0x003140, "Member 'ABP_GlobalGI_LaunchScene_C::Nadir_Color' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, Nadir_Falloff) == 0x003150, "Member 'ABP_GlobalGI_LaunchScene_C::Nadir_Falloff' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, Sun_Scatter_Size) == 0x003154, "Member 'ABP_GlobalGI_LaunchScene_C::Sun_Scatter_Size' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, Moon_Scatter_Size) == 0x003158, "Member 'ABP_GlobalGI_LaunchScene_C::Moon_Scatter_Size' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, MainDirectionLightUpdateThreshold_Mobile) == 0x00315C, "Member 'ABP_GlobalGI_LaunchScene_C::MainDirectionLightUpdateThreshold_Mobile' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, MainDirectionLightUpdateThreshold) == 0x003160, "Member 'ABP_GlobalGI_LaunchScene_C::MainDirectionLightUpdateThreshold' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, GlobalWindDirection) == 0x003164, "Member 'ABP_GlobalGI_LaunchScene_C::GlobalWindDirection' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, GlobalWindRightDirection) == 0x003170, "Member 'ABP_GlobalGI_LaunchScene_C::GlobalWindRightDirection' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, DEBUG无音区特殊地表强度) == 0x00317C, "Member 'ABP_GlobalGI_LaunchScene_C::DEBUG无音区特殊地表强度' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, Character_Rim_Color) == 0x003180, "Member 'ABP_GlobalGI_LaunchScene_C::Character_Rim_Color' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, RealTimeOfDay) == 0x003190, "Member 'ABP_GlobalGI_LaunchScene_C::RealTimeOfDay' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, SunRotation) == 0x003194, "Member 'ABP_GlobalGI_LaunchScene_C::SunRotation' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, DEBUG_角色预览方向光垂直方向) == 0x0031A0, "Member 'ABP_GlobalGI_LaunchScene_C::DEBUG_角色预览方向光垂直方向' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, UIWorldZOffset) == 0x0031A4, "Member 'ABP_GlobalGI_LaunchScene_C::UIWorldZOffset' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, UINeedLerpData) == 0x0031A8, "Member 'ABP_GlobalGI_LaunchScene_C::UINeedLerpData' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, CanSpawnEffect) == 0x0031A9, "Member 'ABP_GlobalGI_LaunchScene_C::CanSpawnEffect' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, 编辑器下关闭LensFlare) == 0x0031AA, "Member 'ABP_GlobalGI_LaunchScene_C::编辑器下关闭LensFlare' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, KuroGlobalColorMap) == 0x0031B0, "Member 'ABP_GlobalGI_LaunchScene_C::KuroGlobalColorMap' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, KuroGlobalHeightMap) == 0x0031B8, "Member 'ABP_GlobalGI_LaunchScene_C::KuroGlobalHeightMap' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, IsComponentsEnable) == 0x0031C0, "Member 'ABP_GlobalGI_LaunchScene_C::IsComponentsEnable' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, DefaultSkyLightShadowSupplement) == 0x0031C4, "Member 'ABP_GlobalGI_LaunchScene_C::DefaultSkyLightShadowSupplement' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, DefaultSkyLightReflectionAddIntensity) == 0x0031C8, "Member 'ABP_GlobalGI_LaunchScene_C::DefaultSkyLightReflectionAddIntensity' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, RainOverrider) == 0x0031D0, "Member 'ABP_GlobalGI_LaunchScene_C::RainOverrider' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, DynamicCloudsActor) == 0x0031D8, "Member 'ABP_GlobalGI_LaunchScene_C::DynamicCloudsActor' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, Clouds_Change_Time) == 0x0031E0, "Member 'ABP_GlobalGI_LaunchScene_C::Clouds_Change_Time' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, LocalDynamicCloudsType) == 0x0031E4, "Member 'ABP_GlobalGI_LaunchScene_C::LocalDynamicCloudsType' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, Clouds_Change_CD) == 0x0031E8, "Member 'ABP_GlobalGI_LaunchScene_C::Clouds_Change_CD' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, Is_Editor_Update) == 0x0031EC, "Member 'ABP_GlobalGI_LaunchScene_C::Is_Editor_Update' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, 启用时间参数写入) == 0x0031ED, "Member 'ABP_GlobalGI_LaunchScene_C::启用时间参数写入' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, InitLightFunctionMap) == 0x0031F0, "Member 'ABP_GlobalGI_LaunchScene_C::InitLightFunctionMap' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, StarsMaterial) == 0x0031F8, "Member 'ABP_GlobalGI_LaunchScene_C::StarsMaterial' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, SM_Stars) == 0x003200, "Member 'ABP_GlobalGI_LaunchScene_C::SM_Stars' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, MilkyWayMaterial) == 0x003208, "Member 'ABP_GlobalGI_LaunchScene_C::MilkyWayMaterial' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, SM_MilkyWay) == 0x003210, "Member 'ABP_GlobalGI_LaunchScene_C::SM_MilkyWay' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, CloudOcean) == 0x003218, "Member 'ABP_GlobalGI_LaunchScene_C::CloudOcean' has a wrong offset!");
static_assert(offsetof(ABP_GlobalGI_LaunchScene_C, FogTImeControl) == 0x003220, "Member 'ABP_GlobalGI_LaunchScene_C::FogTImeControl' has a wrong offset!");

}

