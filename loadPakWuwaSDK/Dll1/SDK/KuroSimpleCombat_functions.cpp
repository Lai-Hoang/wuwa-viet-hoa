#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KuroSimpleCombat

#include "Basic.hpp"

#include "KuroSimpleCombat_classes.hpp"
#include "KuroSimpleCombat_parameters.hpp"


namespace SDK
{

// Function KuroSimpleCombat.KSC_RenderEntityInterface.KSC_AddEntity
// (Event, Public, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// const int32&                            EntityId                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTransform&                InTransform                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void IKSC_RenderEntityInterface::KSC_AddEntity(const int32& EntityId, const struct FTransform& InTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("KSC_RenderEntityInterface", "KSC_AddEntity");

	Params::KSC_RenderEntityInterface_KSC_AddEntity Parms{};

	Parms.EntityId = EntityId;
	Parms.InTransform = std::move(InTransform);

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function KuroSimpleCombat.KSC_RenderEntityInterface.KSC_RemoveEntity
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const int32&                            EntityId                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IKSC_RenderEntityInterface::KSC_RemoveEntity(const int32& EntityId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("KSC_RenderEntityInterface", "KSC_RemoveEntity");

	Params::KSC_RenderEntityInterface_KSC_RemoveEntity Parms{};

	Parms.EntityId = EntityId;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function KuroSimpleCombat.KSC_RenderEntityInterface.KSC_SetActorTransform
// (Event, Public, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// const int32&                            EntityId                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTransform&                InTransform                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void IKSC_RenderEntityInterface::KSC_SetActorTransform(const int32& EntityId, const struct FTransform& InTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("KSC_RenderEntityInterface", "KSC_SetActorTransform");

	Params::KSC_RenderEntityInterface_KSC_SetActorTransform Parms{};

	Parms.EntityId = EntityId;
	Parms.InTransform = std::move(InTransform);

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function KuroSimpleCombat.KSC_Move_Spline.SetSpline
// (Native, Public, BlueprintCallable)
// Parameters:
// class USplineComponent*                 SplineComp                                             (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UKSC_Move_Spline::SetSpline(class USplineComponent* SplineComp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KSC_Move_Spline", "SetSpline");

	Params::KSC_Move_Spline_SetSpline Parms{};

	Parms.SplineComp = SplineComp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KuroSimpleCombat.KSC_Move_Spline.SetSplineWide
// (Native, Public, BlueprintCallable)
// Parameters:
// const float                             Width                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UKSC_Move_Spline::SetSplineWide(const float Width)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KSC_Move_Spline", "SetSplineWide");

	Params::KSC_Move_Spline_SetSplineWide Parms{};

	Parms.Width = Width;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KuroSimpleCombat.KSCDelegateCommon.GetOrAddDelegate
// (Final, Native, Static, Public)
// Parameters:
// class UKSCDelegateCommon*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UKSCDelegateCommon* UKSCDelegateCommon::GetOrAddDelegate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KSCDelegateCommon", "GetOrAddDelegate");

	Params::KSCDelegateCommon_GetOrAddDelegate Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KuroSimpleCombat.KSC_Entity.GetMoveComponent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UKSC_Move*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UKSC_Move* UKSC_Entity::GetMoveComponent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KSC_Entity", "GetMoveComponent");

	Params::KSC_Entity_GetMoveComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KuroSimpleCombat.KSC_Entity.SetFaction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EKSC_Faction                            Faction                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UKSC_Entity::SetFaction(EKSC_Faction Faction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KSC_Entity", "SetFaction");

	Params::KSC_Entity_SetFaction Parms{};

	Parms.Faction = Faction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KuroSimpleCombat.KSC_Entity.SetHP
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UKSC_Entity::SetHP(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KSC_Entity", "SetHP");

	Params::KSC_Entity_SetHP Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KuroSimpleCombat.KSC_Entity.GetAttrComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UKSC_AttrSet*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UKSC_AttrSet* UKSC_Entity::GetAttrComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KSC_Entity", "GetAttrComponent");

	Params::KSC_Entity_GetAttrComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KuroSimpleCombat.KSC_Entity.GetHP
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UKSC_Entity::GetHP() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KSC_Entity", "GetHP");

	Params::KSC_Entity_GetHP Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KuroSimpleCombat.KSC_World.AddDaEntity
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UKSC_DA_Entity*                   DaEntity                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTransform&                Transform                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// class UKSC_Entity*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UKSC_Entity* UKSC_World::AddDaEntity(class UKSC_DA_Entity* DaEntity, const struct FTransform& Transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KSC_World", "AddDaEntity");

	Params::KSC_World_AddDaEntity Parms{};

	Parms.DaEntity = DaEntity;
	Parms.Transform = std::move(Transform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KuroSimpleCombat.KSC_World.RemoveEntity
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UKSC_Entity*                      Entity                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UKSC_World::RemoveEntity(class UKSC_Entity* Entity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KSC_World", "RemoveEntity");

	Params::KSC_World_RemoveEntity Parms{};

	Parms.Entity = Entity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KuroSimpleCombat.KuroSimpleCombatSubsystem.CreateWorld
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UKSC_World*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UKSC_World* UKuroSimpleCombatSubsystem::CreateWorld()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KuroSimpleCombatSubsystem", "CreateWorld");

	Params::KuroSimpleCombatSubsystem_CreateWorld Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KuroSimpleCombat.KuroSimpleCombatSubsystem.DestoryWorld
// (Final, Native, Public, BlueprintCallable)

void UKuroSimpleCombatSubsystem::DestoryWorld()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KuroSimpleCombatSubsystem", "DestoryWorld");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function KuroSimpleCombat.KuroSimpleCombatSubsystem.EntityBeginCastProxy
// (Final, Native, Public, HasOutParams, HasDefaults)
// Parameters:
// uint32                                  EntityId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UKSC_Entity>          EntityClass                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTransform&                EntityTransform                                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// TSubclassOf<class UKSC_Skill>           SkillClass                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UKuroSimpleCombatSubsystem::EntityBeginCastProxy(uint32 EntityId, TSubclassOf<class UKSC_Entity> EntityClass, const struct FTransform& EntityTransform, TSubclassOf<class UKSC_Skill> SkillClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KuroSimpleCombatSubsystem", "EntityBeginCastProxy");

	Params::KuroSimpleCombatSubsystem_EntityBeginCastProxy Parms{};

	Parms.EntityId = EntityId;
	Parms.EntityClass = EntityClass;
	Parms.EntityTransform = std::move(EntityTransform);
	Parms.SkillClass = SkillClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KuroSimpleCombat.KuroSimpleCombatSubsystem.EntityHitProxy
// (Final, Native, Public, HasOutParams, HasDefaults)
// Parameters:
// uint32                                  FromEntityId                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UKSC_Entity>          FromEntityClass                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint32                                  ToEntityId                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UKSC_Entity>          ToEntityClass                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTransform&                HitTransform                                           (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UKuroSimpleCombatSubsystem::EntityHitProxy(uint32 FromEntityId, TSubclassOf<class UKSC_Entity> FromEntityClass, uint32 ToEntityId, TSubclassOf<class UKSC_Entity> ToEntityClass, const struct FTransform& HitTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KuroSimpleCombatSubsystem", "EntityHitProxy");

	Params::KuroSimpleCombatSubsystem_EntityHitProxy Parms{};

	Parms.FromEntityId = FromEntityId;
	Parms.FromEntityClass = FromEntityClass;
	Parms.ToEntityId = ToEntityId;
	Parms.ToEntityClass = ToEntityClass;
	Parms.HitTransform = std::move(HitTransform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KuroSimpleCombat.KuroSimpleCombatSubsystem.EntityInitProxy
// (Final, Native, Public, HasOutParams, HasDefaults)
// Parameters:
// uint32                                  EntityId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UKSC_Entity>          EntityClass                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTransform&                EntityTransform                                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UKuroSimpleCombatSubsystem::EntityInitProxy(uint32 EntityId, TSubclassOf<class UKSC_Entity> EntityClass, const struct FTransform& EntityTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KuroSimpleCombatSubsystem", "EntityInitProxy");

	Params::KuroSimpleCombatSubsystem_EntityInitProxy Parms{};

	Parms.EntityId = EntityId;
	Parms.EntityClass = EntityClass;
	Parms.EntityTransform = std::move(EntityTransform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KuroSimpleCombat.KuroSimpleCombatSubsystem.EntityUninitProxy
// (Final, Native, Public)
// Parameters:
// uint32                                  EntityId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UKSC_Entity>          EntityClass                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UKuroSimpleCombatSubsystem::EntityUninitProxy(uint32 EntityId, TSubclassOf<class UKSC_Entity> EntityClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KuroSimpleCombatSubsystem", "EntityUninitProxy");

	Params::KuroSimpleCombatSubsystem_EntityUninitProxy Parms{};

	Parms.EntityId = EntityId;
	Parms.EntityClass = EntityClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function KuroSimpleCombat.KuroSimpleCombatSubsystem.GetKSCWorld
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UKSC_World*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UKSC_World* UKuroSimpleCombatSubsystem::GetKSCWorld()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KuroSimpleCombatSubsystem", "GetKSCWorld");

	Params::KuroSimpleCombatSubsystem_GetKSCWorld Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

