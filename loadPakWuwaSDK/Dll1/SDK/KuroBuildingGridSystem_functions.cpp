#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KuroBuildingGridSystem

#include "Basic.hpp"

#include "KuroBuildingGridSystem_classes.hpp"
#include "KuroBuildingGridSystem_parameters.hpp"


namespace SDK
{

// Function KuroBuildingGridSystem.KuroBuildingGrid.OccupyTarget
// (RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FKuroBuildingGridCellVector&InCoords                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          InTarget                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AKuroBuildingGrid::OccupyTarget(const struct FKuroBuildingGridCellVector& InCoords, class UObject* InTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KuroBuildingGrid", "OccupyTarget");

	Params::KuroBuildingGrid_OccupyTarget Parms{};

	Parms.InCoords = std::move(InCoords);
	Parms.InTarget = InTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KuroBuildingGridSystem.KuroBuildingGrid.UnoccupyTarget
// (RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          InTarget                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AKuroBuildingGrid::UnoccupyTarget(class UObject* InTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KuroBuildingGrid", "UnoccupyTarget");

	Params::KuroBuildingGrid_UnoccupyTarget Parms{};

	Parms.InTarget = InTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KuroBuildingGridSystem.KuroBuildingGrid.GetBuildingGridGuidString
// (Final, RequiredAPI, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString AKuroBuildingGrid::GetBuildingGridGuidString() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KuroBuildingGrid", "GetBuildingGridGuidString");

	Params::KuroBuildingGrid_GetBuildingGridGuidString Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KuroBuildingGridSystem.KuroBuildingGridPlaceholderInterface.GetSizeByDegree
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// float*                                  Degree                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FKuroBuildingGridCellVector      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FKuroBuildingGridCellVector IKuroBuildingGridPlaceholderInterface::GetSizeByDegree(float* Degree)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("KuroBuildingGridPlaceholderInterface", "GetSizeByDegree");

	Params::KuroBuildingGridPlaceholderInterface_GetSizeByDegree Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Degree != nullptr)
		*Degree = Parms.Degree;

	return Parms.ReturnValue;
}


// Function KuroBuildingGridSystem.KuroBuildingGridPlaceholderInterface.CanBeRemoved
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IKuroBuildingGridPlaceholderInterface::CanBeRemoved() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("KuroBuildingGridPlaceholderInterface", "CanBeRemoved");

	Params::KuroBuildingGridPlaceholderInterface_CanBeRemoved Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KuroBuildingGridSystem.KuroBuildingGridPlaceholderInterface.GetSize
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FKuroBuildingGridCellVector      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FKuroBuildingGridCellVector IKuroBuildingGridPlaceholderInterface::GetSize() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("KuroBuildingGridPlaceholderInterface", "GetSize");

	Params::KuroBuildingGridPlaceholderInterface_GetSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KuroBuildingGridSystem.KuroBuildingGridSubsystem.K2_ProjectPointToGrid
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVectorDouble&             InPoint                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   InNormal                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FKuroBuildingGridRaycastResult&  OutResult                                              (Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UKuroBuildingGridSubsystem::K2_ProjectPointToGrid(class UObject* WorldContextObject, const struct FVectorDouble& InPoint, const struct FVector& InNormal, struct FKuroBuildingGridRaycastResult& OutResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroBuildingGridSubsystem", "K2_ProjectPointToGrid");

	Params::KuroBuildingGridSubsystem_K2_ProjectPointToGrid Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.InPoint = std::move(InPoint);
	Parms.InNormal = std::move(InNormal);
	Parms.OutResult = std::move(OutResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	OutResult = std::move(Parms.OutResult);

	return Parms.ReturnValue;
}


// Function KuroBuildingGridSystem.KuroBuildingGridSubsystem.K2_RaycastGrid
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Start                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   End                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FKuroBuildingGridRaycastResult&  OutResult                                              (Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UKuroBuildingGridSubsystem::K2_RaycastGrid(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, struct FKuroBuildingGridRaycastResult& OutResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KuroBuildingGridSubsystem", "K2_RaycastGrid");

	Params::KuroBuildingGridSubsystem_K2_RaycastGrid Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Start = std::move(Start);
	Parms.End = std::move(End);
	Parms.OutResult = std::move(OutResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	OutResult = std::move(Parms.OutResult);

	return Parms.ReturnValue;
}

}

