#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KuroLevelStateMachine

#include "Basic.hpp"

#include "MovieScene_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// ScriptStruct KuroLevelStateMachine.KuroLevelPlaySequenceBoundActorProxy
// 0x0001 (0x0001 - 0x0000)
struct FKuroLevelPlaySequenceBoundActorProxy final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKuroLevelPlaySequenceBoundActorProxy) == 0x000001, "Wrong alignment on FKuroLevelPlaySequenceBoundActorProxy");
static_assert(sizeof(FKuroLevelPlaySequenceBoundActorProxy) == 0x000001, "Wrong size on FKuroLevelPlaySequenceBoundActorProxy");

// ScriptStruct KuroLevelStateMachine.KuroLevelPlaySequenceOverrideData
// 0x0028 (0x0028 - 0x0000)
struct FKuroLevelPlaySequenceOverrideData final
{
public:
	struct FMovieSceneObjectBindingID             ObjectBindingId;                                   // 0x0000(0x0018)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Object;                                            // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverridesDefault;                                 // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKuroLevelPlaySequenceOverrideData) == 0x000008, "Wrong alignment on FKuroLevelPlaySequenceOverrideData");
static_assert(sizeof(FKuroLevelPlaySequenceOverrideData) == 0x000028, "Wrong size on FKuroLevelPlaySequenceOverrideData");
static_assert(offsetof(FKuroLevelPlaySequenceOverrideData, ObjectBindingId) == 0x000000, "Member 'FKuroLevelPlaySequenceOverrideData::ObjectBindingId' has a wrong offset!");
static_assert(offsetof(FKuroLevelPlaySequenceOverrideData, Object) == 0x000018, "Member 'FKuroLevelPlaySequenceOverrideData::Object' has a wrong offset!");
static_assert(offsetof(FKuroLevelPlaySequenceOverrideData, bOverridesDefault) == 0x000020, "Member 'FKuroLevelPlaySequenceOverrideData::bOverridesDefault' has a wrong offset!");

// ScriptStruct KuroLevelStateMachine.KuroLevelState
// 0x0070 (0x0070 - 0x0000)
struct FKuroLevelState final
{
public:
	class FName                                   StateName;                                         // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, class FName>                Transitions;                                       // 0x0010(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<class UKuroLevelStateAction*>          Actions;                                           // 0x0060(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroLevelState) == 0x000008, "Wrong alignment on FKuroLevelState");
static_assert(sizeof(FKuroLevelState) == 0x000070, "Wrong size on FKuroLevelState");
static_assert(offsetof(FKuroLevelState, StateName) == 0x000000, "Member 'FKuroLevelState::StateName' has a wrong offset!");
static_assert(offsetof(FKuroLevelState, Transitions) == 0x000010, "Member 'FKuroLevelState::Transitions' has a wrong offset!");
static_assert(offsetof(FKuroLevelState, Actions) == 0x000060, "Member 'FKuroLevelState::Actions' has a wrong offset!");

// ScriptStruct KuroLevelStateMachine.KuroLevelSwitchCollisionData
// 0x0028 (0x0028 - 0x0000)
struct FKuroLevelSwitchCollisionData final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeChildren;                                  // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCollisionProfileName                  EnterCollision;                                    // 0x000C(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bExitReverse;                                      // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCollisionProfileName                  ExitCollision;                                     // 0x001C(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroLevelSwitchCollisionData) == 0x000008, "Wrong alignment on FKuroLevelSwitchCollisionData");
static_assert(sizeof(FKuroLevelSwitchCollisionData) == 0x000028, "Wrong size on FKuroLevelSwitchCollisionData");
static_assert(offsetof(FKuroLevelSwitchCollisionData, Actor) == 0x000000, "Member 'FKuroLevelSwitchCollisionData::Actor' has a wrong offset!");
static_assert(offsetof(FKuroLevelSwitchCollisionData, bIncludeChildren) == 0x000008, "Member 'FKuroLevelSwitchCollisionData::bIncludeChildren' has a wrong offset!");
static_assert(offsetof(FKuroLevelSwitchCollisionData, EnterCollision) == 0x00000C, "Member 'FKuroLevelSwitchCollisionData::EnterCollision' has a wrong offset!");
static_assert(offsetof(FKuroLevelSwitchCollisionData, bExitReverse) == 0x000018, "Member 'FKuroLevelSwitchCollisionData::bExitReverse' has a wrong offset!");
static_assert(offsetof(FKuroLevelSwitchCollisionData, ExitCollision) == 0x00001C, "Member 'FKuroLevelSwitchCollisionData::ExitCollision' has a wrong offset!");

// ScriptStruct KuroLevelStateMachine.KuroLevelSwitchMaterialData
// 0x0028 (0x0028 - 0x0000)
struct FKuroLevelSwitchMaterialData final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeChildren;                                  // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstance*                      EnterMaterial;                                     // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExitReverse;                                      // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstance*                      ExitMaterial;                                      // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKuroLevelSwitchMaterialData) == 0x000008, "Wrong alignment on FKuroLevelSwitchMaterialData");
static_assert(sizeof(FKuroLevelSwitchMaterialData) == 0x000028, "Wrong size on FKuroLevelSwitchMaterialData");
static_assert(offsetof(FKuroLevelSwitchMaterialData, Actor) == 0x000000, "Member 'FKuroLevelSwitchMaterialData::Actor' has a wrong offset!");
static_assert(offsetof(FKuroLevelSwitchMaterialData, bIncludeChildren) == 0x000008, "Member 'FKuroLevelSwitchMaterialData::bIncludeChildren' has a wrong offset!");
static_assert(offsetof(FKuroLevelSwitchMaterialData, EnterMaterial) == 0x000010, "Member 'FKuroLevelSwitchMaterialData::EnterMaterial' has a wrong offset!");
static_assert(offsetof(FKuroLevelSwitchMaterialData, bExitReverse) == 0x000018, "Member 'FKuroLevelSwitchMaterialData::bExitReverse' has a wrong offset!");
static_assert(offsetof(FKuroLevelSwitchMaterialData, ExitMaterial) == 0x000020, "Member 'FKuroLevelSwitchMaterialData::ExitMaterial' has a wrong offset!");

// ScriptStruct KuroLevelStateMachine.KuroLevelToggleActiveData
// 0x0010 (0x0010 - 0x0000)
struct FKuroLevelToggleActiveData final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeChildren;                                  // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnterActive;                                      // 0x0009(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnterCollisionEnable;                             // 0x000A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExitReverse;                                      // 0x000B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExitActive;                                       // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExitCollisionEnable;                              // 0x000D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKuroLevelToggleActiveData) == 0x000008, "Wrong alignment on FKuroLevelToggleActiveData");
static_assert(sizeof(FKuroLevelToggleActiveData) == 0x000010, "Wrong size on FKuroLevelToggleActiveData");
static_assert(offsetof(FKuroLevelToggleActiveData, Actor) == 0x000000, "Member 'FKuroLevelToggleActiveData::Actor' has a wrong offset!");
static_assert(offsetof(FKuroLevelToggleActiveData, bIncludeChildren) == 0x000008, "Member 'FKuroLevelToggleActiveData::bIncludeChildren' has a wrong offset!");
static_assert(offsetof(FKuroLevelToggleActiveData, bEnterActive) == 0x000009, "Member 'FKuroLevelToggleActiveData::bEnterActive' has a wrong offset!");
static_assert(offsetof(FKuroLevelToggleActiveData, bEnterCollisionEnable) == 0x00000A, "Member 'FKuroLevelToggleActiveData::bEnterCollisionEnable' has a wrong offset!");
static_assert(offsetof(FKuroLevelToggleActiveData, bExitReverse) == 0x00000B, "Member 'FKuroLevelToggleActiveData::bExitReverse' has a wrong offset!");
static_assert(offsetof(FKuroLevelToggleActiveData, bExitActive) == 0x00000C, "Member 'FKuroLevelToggleActiveData::bExitActive' has a wrong offset!");
static_assert(offsetof(FKuroLevelToggleActiveData, bExitCollisionEnable) == 0x00000D, "Member 'FKuroLevelToggleActiveData::bExitCollisionEnable' has a wrong offset!");

}

