#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KuroCollision

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class KuroCollision.CollisionClusterComponent
// 0x00D0 (0x05E0 - 0x0510)
class UCollisionClusterComponent final : public UPrimitiveComponent
{
public:
	uint8                                         Pad_510[0x78];                                     // 0x0510(0x0078)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPhysicalMaterial*>              PhysicalMaterials;                                 // 0x0588(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class UBodySetup*>                     BodySetups;                                        // 0x0598(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_5A8[0x10];                                     // 0x05A8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoxSphereBounds                       RelativeBounds;                                    // 0x05B8(0x001C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_5D4[0xC];                                      // 0x05D4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CollisionClusterComponent">();
	}
	static class UCollisionClusterComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCollisionClusterComponent>();
	}
};
static_assert(alignof(UCollisionClusterComponent) == 0x000010, "Wrong alignment on UCollisionClusterComponent");
static_assert(sizeof(UCollisionClusterComponent) == 0x0005E0, "Wrong size on UCollisionClusterComponent");
static_assert(offsetof(UCollisionClusterComponent, PhysicalMaterials) == 0x000588, "Member 'UCollisionClusterComponent::PhysicalMaterials' has a wrong offset!");
static_assert(offsetof(UCollisionClusterComponent, BodySetups) == 0x000598, "Member 'UCollisionClusterComponent::BodySetups' has a wrong offset!");
static_assert(offsetof(UCollisionClusterComponent, RelativeBounds) == 0x0005B8, "Member 'UCollisionClusterComponent::RelativeBounds' has a wrong offset!");

// Class KuroCollision.LevelCollisionActor
// 0x0008 (0x02B8 - 0x02B0)
class ALevelCollisionActor final : public AActor
{
public:
	class UCollisionClusterComponent*             CollisionClusterComponent;                         // 0x02B0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LevelCollisionActor">();
	}
	static class ALevelCollisionActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALevelCollisionActor>();
	}
};
static_assert(alignof(ALevelCollisionActor) == 0x000008, "Wrong alignment on ALevelCollisionActor");
static_assert(sizeof(ALevelCollisionActor) == 0x0002B8, "Wrong size on ALevelCollisionActor");
static_assert(offsetof(ALevelCollisionActor, CollisionClusterComponent) == 0x0002B0, "Member 'ALevelCollisionActor::CollisionClusterComponent' has a wrong offset!");

}

