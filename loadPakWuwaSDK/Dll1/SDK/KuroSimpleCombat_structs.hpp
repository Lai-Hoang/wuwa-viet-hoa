#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KuroSimpleCombat

#include "Basic.hpp"


namespace SDK
{

// Enum KuroSimpleCombat.EKSC_ShapeType
// NumValues: 0x0003
enum class EKSC_ShapeType : uint8
{
	Sphere                                   = 0,
	Box                                      = 1,
	EKSC_MAX                                 = 2,
};

// Enum KuroSimpleCombat.EKSC_FXType
// NumValues: 0x0005
enum class EKSC_FXType : uint8
{
	Burst                                    = 0,
	Beam                                     = 1,
	Range                                    = 2,
	Mat                                      = 3,
	EKSC_MAX                                 = 4,
};

// Enum KuroSimpleCombat.EKSC_CalculateType
// NumValues: 0x0003
enum class EKSC_CalculateType : uint8
{
	Hurt                                     = 0,
	Heal                                     = 1,
	EKSC_MAX                                 = 2,
};

// Enum KuroSimpleCombat.EKSC_AttrType
// NumValues: 0x0025
enum class EKSC_AttrType : uint8
{
	EAttributeType_None                      = 0,
	Lv                                       = 1,
	Life                                     = 3,
	Atk                                      = 7,
	Def                                      = 10,
	DamageChangePhys                         = 21,
	DamageChangeElement1                     = 22,
	DamageChangeElement2                     = 23,
	DamageChangeElement3                     = 24,
	DamageChangeElement4                     = 25,
	DamageChangeElement5                     = 26,
	DamageChangeElement6                     = 27,
	DamageResistancePhys                     = 28,
	DamageResistanceElement1                 = 29,
	DamageResistanceElement2                 = 30,
	DamageResistanceElement3                 = 31,
	DamageResistanceElement4                 = 32,
	DamageResistanceElement5                 = 33,
	DamageResistanceElement6                 = 34,
	HealChange                               = 35,
	HealedChange                             = 36,
	DamageReducePhys                         = 37,
	DamageReduceElement1                     = 38,
	DamageReduceElement2                     = 39,
	DamageReduceElement3                     = 40,
	DamageReduceElement4                     = 41,
	DamageReduceElement5                     = 42,
	DamageReduceElement6                     = 43,
	ElementPropertyType                      = 97,
	IgnoreDamageResistancePhys               = 100,
	IgnoreDamageResistanceElement1           = 101,
	IgnoreDamageResistanceElement2           = 102,
	IgnoreDamageResistanceElement3           = 103,
	IgnoreDamageResistanceElement4           = 104,
	IgnoreDamageResistanceElement5           = 105,
	IgnoreDamageResistanceElement6           = 106,
	EKSC_MAX                                 = 107,
};

// Enum KuroSimpleCombat.EKSC_Element
// NumValues: 0x0009
enum class EKSC_Element : uint8
{
	Physical                                 = 0,
	Ice                                      = 1,
	Fire                                     = 2,
	Thunder                                  = 3,
	Wind                                     = 4,
	Light                                    = 5,
	Dark                                     = 6,
	ElementTypeMax                           = 7,
	EKSC_MAX                                 = 8,
};

// Enum KuroSimpleCombat.EKSC_SearchType
// NumValues: 0x000A
enum class EKSC_SearchType : uint8
{
	SearchType0                              = 0,
	SearchType1                              = 1,
	SearchType2                              = 2,
	SearchType3                              = 4,
	SearchType4                              = 8,
	SearchType5                              = 16,
	SearchType6                              = 32,
	SearchType7                              = 64,
	SearchType8                              = 128,
	EKSC_MAX                                 = 129,
};

// Enum KuroSimpleCombat.EKSC_Faction
// NumValues: 0x000A
enum class EKSC_Faction : uint8
{
	Faction0                                 = 0,
	Faction1                                 = 1,
	Faction2                                 = 2,
	Faction3                                 = 4,
	Faction4                                 = 8,
	Faction5                                 = 16,
	Faction6                                 = 32,
	Faction7                                 = 64,
	Faction8                                 = 128,
	EKSC_MAX                                 = 129,
};

// Enum KuroSimpleCombat.EKSC_Skill_State
// NumValues: 0x0007
enum class EKSC_Skill_State : uint8
{
	Ready                                    = 0,
	PreDelay                                 = 1,
	BeginCast                                = 2,
	EndCast                                  = 3,
	PostDelay                                = 4,
	CoolDown                                 = 5,
	EKSC_Skill_MAX                           = 6,
};

// ScriptStruct KuroSimpleCombat.KSCDamage
// 0x0002 (0x0002 - 0x0000)
struct FKSCDamage final
{
public:
	EKSC_CalculateType                            CalculateType;                                     // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKSC_Element                                  Element;                                           // 0x0001(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKSCDamage) == 0x000001, "Wrong alignment on FKSCDamage");
static_assert(sizeof(FKSCDamage) == 0x000002, "Wrong size on FKSCDamage");
static_assert(offsetof(FKSCDamage, CalculateType) == 0x000000, "Member 'FKSCDamage::CalculateType' has a wrong offset!");
static_assert(offsetof(FKSCDamage, Element) == 0x000001, "Member 'FKSCDamage::Element' has a wrong offset!");

// ScriptStruct KuroSimpleCombat.KSCDelegates
// 0x0050 (0x0050 - 0x0000)
struct FKSCDelegates final
{
public:
	TMap<TSubclassOf<class UKSCDelegateBase>, class UKSCDelegateBase*> Type2Delegates;               // 0x0000(0x0050)(NativeAccessSpecifierPrivate)
};
static_assert(alignof(FKSCDelegates) == 0x000008, "Wrong alignment on FKSCDelegates");
static_assert(sizeof(FKSCDelegates) == 0x000050, "Wrong size on FKSCDelegates");
static_assert(offsetof(FKSCDelegates, Type2Delegates) == 0x000000, "Member 'FKSCDelegates::Type2Delegates' has a wrong offset!");

// ScriptStruct KuroSimpleCombat.KSC_ObjectPoll
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FKSC_ObjectPoll final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKSC_ObjectPoll) == 0x000008, "Wrong alignment on FKSC_ObjectPoll");
static_assert(sizeof(FKSC_ObjectPoll) == 0x000010, "Wrong size on FKSC_ObjectPoll");

}

