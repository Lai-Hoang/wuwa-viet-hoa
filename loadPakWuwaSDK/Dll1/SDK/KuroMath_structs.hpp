#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KuroMath

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum KuroMath.EEasingType
// NumValues: 0x0020
enum class EEasingType : uint8
{
	Linear                                   = 0,
	EaseInSine                               = 1,
	EaseOutSine                              = 2,
	EaseInOutSine                            = 3,
	EaseInQuad                               = 4,
	EaseOutQuad                              = 5,
	EaseInOutQuad                            = 6,
	EaseInCubic                              = 7,
	EaseOutCubic                             = 8,
	EaseInOutCubic                           = 9,
	EaseInQuart                              = 10,
	EaseOutQuart                             = 11,
	EaseInOutQuart                           = 12,
	EaseInQuint                              = 13,
	EaseOutQuint                             = 14,
	EaseInOutQuint                           = 15,
	EaseInExpo                               = 16,
	EaseOutExpo                              = 17,
	EaseInOutExpo                            = 18,
	EaseInCirc                               = 19,
	EaseOutCirc                              = 20,
	EaseInOutCirc                            = 21,
	EaseInBack                               = 22,
	EaseOutBack                              = 23,
	EaseInOutBack                            = 24,
	EaseInElastic                            = 25,
	EaseOutElastic                           = 26,
	EaseInOutElastic                         = 27,
	EaseInBounce                             = 28,
	EaseOutBounce                            = 29,
	EaseInOutBounce                          = 30,
	EEasingType_MAX                          = 31,
};

// Enum KuroMath.EEndType
// NumValues: 0x0006
enum class EEndType : uint8
{
	Polygon                                  = 0,
	Joined                                   = 1,
	Butt                                     = 2,
	Square                                   = 3,
	Round                                    = 4,
	EEndType_MAX                             = 5,
};

// Enum KuroMath.EJoinType
// NumValues: 0x0004
enum class EJoinType : uint8
{
	Square                                   = 0,
	Round                                    = 1,
	Miter                                    = 2,
	EJoinType_MAX                            = 3,
};

// Enum KuroMath.EKuroMathSampleSpacing
// NumValues: 0x0005
enum class EKuroMathSampleSpacing : uint8
{
	UniformDistance                          = 0,
	UniformTime                              = 1,
	ErrorTolerance                           = 2,
	OriginPoints                             = 3,
	EKuroMathSampleSpacing_MAX               = 4,
};

// ScriptStruct KuroMath.KuroGeometryGeneralPolygonList
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FKuroGeometryGeneralPolygonList final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKuroGeometryGeneralPolygonList) == 0x000008, "Wrong alignment on FKuroGeometryGeneralPolygonList");
static_assert(sizeof(FKuroGeometryGeneralPolygonList) == 0x000010, "Wrong size on FKuroGeometryGeneralPolygonList");

// ScriptStruct KuroMath.KuroGeometrySimplePolygon
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FKuroGeometrySimplePolygon final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKuroGeometrySimplePolygon) == 0x000008, "Wrong alignment on FKuroGeometrySimplePolygon");
static_assert(sizeof(FKuroGeometrySimplePolygon) == 0x000010, "Wrong size on FKuroGeometrySimplePolygon");

// ScriptStruct KuroMath.KuroSplineSamplingOptions
// 0x000C (0x000C - 0x0000)
struct FKuroSplineSamplingOptions final
{
public:
	int32                                         NumSamples;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ErrorTolerance;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKuroMathSampleSpacing                        SampleSpacing;                                     // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESplineCoordinateSpace                        CoordinateSpace;                                   // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKuroSplineSamplingOptions) == 0x000004, "Wrong alignment on FKuroSplineSamplingOptions");
static_assert(sizeof(FKuroSplineSamplingOptions) == 0x00000C, "Wrong size on FKuroSplineSamplingOptions");
static_assert(offsetof(FKuroSplineSamplingOptions, NumSamples) == 0x000000, "Member 'FKuroSplineSamplingOptions::NumSamples' has a wrong offset!");
static_assert(offsetof(FKuroSplineSamplingOptions, ErrorTolerance) == 0x000004, "Member 'FKuroSplineSamplingOptions::ErrorTolerance' has a wrong offset!");
static_assert(offsetof(FKuroSplineSamplingOptions, SampleSpacing) == 0x000008, "Member 'FKuroSplineSamplingOptions::SampleSpacing' has a wrong offset!");
static_assert(offsetof(FKuroSplineSamplingOptions, CoordinateSpace) == 0x000009, "Member 'FKuroSplineSamplingOptions::CoordinateSpace' has a wrong offset!");

// ScriptStruct KuroMath.Vector2DArrayStruct
// 0x0010 (0x0010 - 0x0000)
struct FVector2DArrayStruct final
{
public:
	TArray<struct FVector2D>                      Vector2Ds;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVector2DArrayStruct) == 0x000008, "Wrong alignment on FVector2DArrayStruct");
static_assert(sizeof(FVector2DArrayStruct) == 0x000010, "Wrong size on FVector2DArrayStruct");
static_assert(offsetof(FVector2DArrayStruct, Vector2Ds) == 0x000000, "Member 'FVector2DArrayStruct::Vector2Ds' has a wrong offset!");

}

